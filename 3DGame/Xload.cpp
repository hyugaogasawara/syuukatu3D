//=============================================================================
//
// Xファイル読み込みクラス [Xload.cpp]
// Author : 小笠原　彪我
//
//=============================================================================
//=============================================================================
//インクルードファイル
//=============================================================================
#include "Xload.h"
//=============================================================================
// 静的メンバ変数宣言
//=============================================================================

//=============================================================================
// コンストラクタ
//=============================================================================
CXload::CXload()
{
	// メンバ変数のクリア
	m_nType = 0;
}
//=============================================================================
// デストラクタ
//=============================================================================
CXload::~CXload()
{
}
//=============================================================================
// 初期化処理
//=============================================================================
HRESULT CXload::Init(void)
{
	// デバイスを取得
	LPDIRECT3DDEVICE9 pDevice = NULL;
	pDevice = CManager::GetRenderer()->GetDevice();

	// ファイルを開く
	FILE *pFile = fopen("data/LOADFILE/AllModel.txt", "r");

	char aFile[256];	// ファイルの文字列保存

	if (pFile != NULL)
	{
		while (true)
		{// 文字列を読み込む
			fscanf(pFile, "%s", &aFile[0]);
			if (strcmp(&aFile[0], "MODEL_FILENAME") == 0)
			{// モデルのパス
				fscanf(pFile, "%s", &aFile[0]);
				fscanf(pFile, "%s", &aFile[0]);

				D3DXLoadMeshFromX(&aFile[0], D3DXMESH_SYSTEMMEM,
					pDevice, NULL, &m_pBuffMat[m_nType], NULL, &m_nNumMat[m_nType], &m_pMesh[m_nType]);
				m_nType++;
			}
			if (strcmp(&aFile[0], "END_SCRIPT") == 0)
			{// 読み込み終了
				break;
			}
		}
		fclose(pFile);
	}
	return S_OK;
}
//=============================================================================
// 終了処理
//=============================================================================
void CXload::Uninit(void)
{
}
